第7章 取消与关闭
    Java没有提供任何机制来安全地终止线程。但它提供了中断(Interruption),这是一种协作机制，能使使一个线程终止另一个线程的
当前工作。
    这种协作式的方法是必要的，我们很少希望某个任务、线程或服务立即停止，因为这种理解停止会使共享的数据结构处于不一致的状态。
相反，在编写任务和服务时可以使用一种协作的方式：当需要停止时，它首先会清除当前正在执行的工作，然后再结束，这提供了更好的灵活
性，因为任务本身的代码会比发出取消请求的代码更清楚如何执行清除工作。

7.1 任务取消
    一个可取消的任务必须拥有取消策略(Cancellation Policy),在这个策略中将详细地定义取消操作的"How"、"When"以及"What"，即
代码如何(How)请求取消该任务，任务在何时(When)检查是否已经取消请求了取消，以及在响应取消请求时应该执行哪些(What)操作。


7.1.2 中断策略
    正如任务中应该包含取消策略一样，线程同样应该包含中断策略。中断策略规定线程如何解释某个中断请求--当发现中断请求时，应该
做哪些工作(如果需要的话)，哪些工作单元对于中断来说是原子操作，以及以多快的速度来响应中断。
    最合理的中断策略是某种形式的线程级(Thread-Level)取消操作或服务级(Service-Level)取消操作；尽快退出，在必要时进行清理，
通知某个所有者该线程退出。此外还可以建立其他的中断策略，例如暂停服务或重新开始服务。
    当线程检查到中断请求，任务并不需要放弃所有的操作--它可以推迟处理中断请求，并直到某个更合适的时刻。因此需要记住中断请求，
并在完成当前任务后抛出InterruptedException或者表示已收到中断请求。这样可以保护数据结构不被破坏。