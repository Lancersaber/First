package com.atguigu.tree;
/**
 * 堆是具有一下性质的完全二叉树；每个节点的值都大于(或者都小于)或等于其左右孩子节点的值，注意，没有要求节点的左孩子和右孩子节点值的大小关系
 *
 * 堆排序的具体基本思想如下
 * 1、将待排序序列狗造成一个大顶堆===>这里实际上是将树中的数据转换成一个数组
 * 2、此时，整个序列的最大值就是堆顶的根节点
 * 3、将其与末尾元素进行交换，此时末尾就为最大值
 * 4、然后将剩余n-1个元素重新构造成一个堆，这样会得到n个元素的次小值。如果此反复执行，便能得到一个有序序列。
 * 可以看到在构建大顶堆的过程中，元素的个数在逐渐减少，最后就得到一个有序序列了。
 *
 * 堆排序的基本思路
 * 1、将无序序列构建成一个堆，根据升序降序需求选择大顶堆或小顶堆
 * 2、将堆顶元素与末尾元素交换，将最大元素"沉"到数组末端
 * 3、重新调整结构，使其满足堆定义，然后继续交换堆顶元素与当前末尾元素，反复执行调整+交换步骤，直到整个序列有序。
 */
public class HeapSort {

    public static void main(String[] args){
        //要求将数组进行升序排序
        int arr[]={4,6,8,5,9};
    }

    //编写一个堆排序的方法
    public static void heapSort(int arr[]){
        System.out.println("堆排序！！");

    }

    //将一个数组(对应一个二叉树)，调整成一个大顶堆

    /**
     * 功能：完成将以 i 对应的非叶子的树调整成为大顶堆
     * @param arr   待调整的数组
     * @param i     表示非叶子节点在数组中索引
     * @param length 表示对多少个元素继续调整，length是在逐渐减小
     */
    public static void adjustHeap(int arr[],int i,int length){
        int temp=arr[i];//先取出当前元素的值，保存在临时变量
        //开始调整
        //说明
        //1、k= i*2+1 k是i节点的左子节点(正是所要找的结点)
        for (int k=i*2+1;k<length;k=k*2+1){
            if (k+1<length && arr[k] <arr[k+1]){ //说明左子节点的值小于右子节点的值
                k++;// k指向右子节点
            }
            if (arr[k]>temp){   //如果子节点大于父节点
                arr[i]=arr[k];//把较大的值赋值给当前节点
                i=k;//i指向k，继续循环比较
            }else {
                break;
            }
        }
    }
}
