package com.lancer.行为型模式.观察者模式;

public class test {

    /**
     *      观察者模式(Observer Pattern),又称为发布。订阅模式，它是软甲设计模式中的一种。观察者模式定义了对象的一种一对多的依赖关系，当一个对象的
     * 状态发生变化时，所有依赖于它的对象都得到通知并被自动更新。
     *      在观察者模式中，一个目标物价(被观察者)管理所有相依于它的观察者物价，并且在它本身的状态改变时主动发出通知，这通常通过呼叫各观察者所提供的
     * 方法来实现。此种模式通常被用来实现事件处理系统。
     *      观察者模式有很多实现方式，从根本上说，该模式必须包含两个角色：观察者和被观察者。观察者和被观察者对象之间的互动关系不能体现成类之间的直接
     * 调用，那样就将使观察者和被观察对象之间紧密地耦合起来，从根本上违反了面向对象的设计模式。
     *      在具体的实现中，我们需要面向接口编程，让被观察者管理管理观察者对象接口类型，然后调用接口方法更新观察者。
     *
     *
     * 设计原则
     * 1、开-闭 原则
     * 2、单一职责原则
     * 3、依赖倒置原则
     *      依赖倒置原则是一项重要的设计原则，它的思想就是要依赖于抽象，不要依赖于具体。简单地说就是要求对抽象进行编程，不要
     * 对实现进行编程，这样就降低了客户与实现模块间的耦合。在观察者模式中，很好地体现了这一原则，抽象观察者角色定义了更新的
     * 接口，在被观察者对象中存储的是该抽象类型的集合，当被观察者发生变化时，会逐一地调用观察者更新接口，从而使具体的观察者
     * 对象获得通知。
     */
}
