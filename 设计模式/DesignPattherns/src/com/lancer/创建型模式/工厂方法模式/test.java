package com.lancer.创建型模式.工厂方法模式;

public class test {
    /**
     *      所谓工厂方法模式，就是定义一个创建产品对象的工厂接口，让子类决定实例化哪一种实例对象，也就是
     * 将实际创建对象的工作推迟到子类当中，核心工厂类不再负责具体产品的创建。
     *      工厂方法模式是对简单工厂模式进行了抽象。如此以来核心类成为一个抽象工厂角色，仅负责具体工厂子类
     * 必须实现的接口，这样进一步抽象化的好处是使得工厂方法模式可以使系统在不修改具体工厂角色的情况下引进
     * 新的产品。
     *
     * 我们可以这样理解工厂方法设计模式：
     * 1）抽象工厂生产抽象产品(ISwordFactory生产AbstractSword)，具体工厂生产具体产品(Caocao类生产QiXingSword)
     * 2）抽象对具体(具体类实现抽象类，如Caocao类实现ISwordFactory；QiXingSword继承AbstractSword)
     *
     * 设计原则
     *      首先了解一个软件设计的原则---“开-闭”原则。所谓“开-闭”原则，就是指一个软件实体应对扩展开放，对修改关闭。
     * 它所阐述的意思就是，在设计一个软件模块的时候应该使这个模块可以在不被修改的前提下被扩展。
     *
     * “开-闭”原则具备以下优势
     * 1）通过已有系统扩展自身的行为，从而满足新的软件需求，具有一定的适应性和灵活性。
     * 2）原有的软件系统逻辑不被修改，保证了原系统和新系统的稳定性
     *
     * 2、依赖倒置原则
     * 所谓依赖倒置原则，就是不论工厂还是产品都应该依赖于抽象，而不是具体的实现类。
     */
}
