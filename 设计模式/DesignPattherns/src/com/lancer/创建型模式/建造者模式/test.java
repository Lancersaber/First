package com.lancer.创建型模式.建造者模式;

public class test {

    /**
     *      建造者模式(Builder Pattern)，建造者简单理解就是造对象，只不过建造者模式建造的不是一般的东西，是一个比较复杂的东西。
     * 建造者设计模式是一个构建复杂对象的设计模式。在一个软件系统中，可能会面临创建一个复杂对象的工作，如果我们使用单一的方法
     * 或者单一的对象来创建会比较繁琐，当所创建复杂对象发生改变时，整个系统就可能面临剧烈的变化。这时就需要我们将这个复杂的创建过程
     * 分解成若干部分，各个子部分用一定的算法构成。但是，子部分可能经常发生改变，如何能保证整体创建工作的稳定性呢？这就需要建造者模式
     * 的支持了。
     *      建造者模式把复杂对象的创建与表示分离，使得同样的构建过程可以创建不同的表示。
     *
     *
     * 设计原则：
     * 1、分布骤创建复杂对象
     *      当我们在进行一个软件系统设计的时候，要考虑到软件细化的“颗粒度”。所谓软件设计的颗粒度，包括系统结构功能的分解细化程序
     * 和复杂对象的分解程度，要使系统功能专业而单一，降低对象与对象之间、各个功能模块之间的依赖和耦合。我们提倡，软件中的每一个操作
     * 过程不要太过复杂，如果太过复杂既不便于系统维护，也不利于软件系统的解耦。当然，软件结构或者操作过程也不能太细化了，那样就会造成
     * 各部件之间的频繁调用，导致运行效率降低。
     * 2、构建和表示分离
     * 3、单一职责原则
     *
     *
     * 建造者模式与抽象工厂模式的区别
     *      抽象工厂模式和建造者模式有相似之处。它们都是创建复杂对象的设计模式，区别在于Builder建造者模式着重于分步骤构造一个复杂对象，
     * 而Abstract Factory抽象工厂模式则着重于多个系列的产品对象即对象族(简单的或复杂的)的构造。Builder建造者模式是在最后一步返回具体
     * 产品，而Abstract Factory抽象工厂则是立即返回具体产品。
     */
}
