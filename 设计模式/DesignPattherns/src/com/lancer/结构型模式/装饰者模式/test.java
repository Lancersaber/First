package com.lancer.结构型模式.装饰者模式;

public class test {
    /**
     * 模式定义
     *
     *      装饰者模式(Decorator Pattern),是在不改变原类文件和使用继承的情况下，动态地扩展一个对象的功能。它是通过创建一个
     *  包装对象，也就是装饰来包裹真实的对象。
     *
     *  使用装饰者模式需要注意的几点内容：
     *  1）装饰者对象和真实对象有着相同的接口。这样客户端对象可以和真实对象相同的方式和装饰对象交互。
     *  2）装饰对象包含一个真实对象的引用
     *  3）装饰对象接受所有来自客户端的请求，并把这些请求转发给真实的对象。
     *  4) 装饰对象可以在转发这些请求以前或以后增加一些附加功能。这样就确保了在运行时，不用修改给定对象的结构就可以
     *  在外部增加附加功能。在面向对象的设计中，通常是通过继承来实现对给定类的功能扩展，然而，装饰者模式不需要子类，
     *  可以在应用程序运行时动态扩展功能，更加方便，灵活。
     *
     *
     *  设计模式
     *  1、封装变化部分
     *      装饰着模式应用中“变化”的部分是组件的扩展功能，装饰者和被装饰者完全隔离开来，这样我们就可以任意改变装饰者和
     *  被装饰者，而不会产生任何影响。
     */
}
