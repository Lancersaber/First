package com.lancer.结构型模式.代理模式;

public class test {
    /**
     * 模式定义
     *
     *      代理模式(Proxy Pattern),是软件设计模式中的一项基本技巧，在代理模式中，有两个对象参与处理同一请求，接收的请求由代理对象
     * 委托给真实对象处理，代理对象控制请求的访问，它在客户端应用程序与真实目标对象之间起到了一个中介桥梁的作用。代理模式使用对象
     * 聚合代替继承，有效地降低了软件设计模块之间的耦合度。
     *
     * 在代理模式中，设计的角色有以下几类
     * 1）抽象角色：声明真实对象和代理对象的共同接口。
     * 2）真实对象：真正处理请求的目标对象
     * 3）代理对象：代理对象角色内部含有真实对象的引用，从而代理对象可以将请求转为真实对象处理。同时，
     * 代理对象在执行真实对象操作的前后还可以添加附加操作。
     *
     *
     * 设计模式
     * 1、延迟加载，提高系统效率
     *      一个系统，特别是一个规模较大的系统，如果在初始化的时候加载资源过多，会造成用户等待的时间过长，容易引起用户的不满。
     * 代理模式具有延迟处理的效果，代理对象和真实对象具有相同的接口，当我们进行某一项具体功能调用时，可以使用代理对象预先加载
     * 资源，初始化数据，初始化成功后再对真实对象进行调用，这样就免去了用户因等待时间过长而造成抱怨，提高了系统的访问效率。
     * 代理模式的另一个优点是，可以在调用真实对象处理之前进行一系列的校验工作，有效地将真实对象的功能进行分离，降低模块的耦合度。
     *
     * 2、单一职责原则
     *
     */
}
