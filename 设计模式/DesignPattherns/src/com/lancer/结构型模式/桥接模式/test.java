package com.lancer.结构型模式.桥接模式;

public class test {
    /**
     * 模式定义
     *
     *      桥接模式(Bridge Pattern)，也称为桥梁模式。在软件系统中，某些类型由于自身的逻辑，具有两个或多个维度的变化，如何应对这种
     * “多维度的变化”？桥接模式使得软件系统能够轻松地沿着多个方向进行变化，而又不引入额外的复杂度。
     *      桥接模式的用意是“将抽象化(Abstraction)与实现化(Implementation)脱耦，使得二者可以独立地变化”
     *
     * 1）抽象化
     *      存在于多个实体中的共同的概念性联系，就是抽象化。作为一个过程，抽象化就是忽略一些信息，从而把不同的实体当作同样的实体对待。
     * 2）实体化
     *      抽象化给出的具体实现，就是实体化
     * 3）脱耦
     *      所谓耦合，就是两个实体的行为的某种强关联。而将它们的强关联去掉，就是耦合的解脱，或称脱耦。
     *  在这里，脱耦是指抽象化和实现化之间的耦合解脱开，或者说是将它们之间的强关联改换成弱关联。
     *      将两个角色之间的继承关系改为聚合关系，就是将它们之间的强关联改成弱关联。因此，桥接模式中的解耦，就是指在一个软件系统的抽象
     *  化和实现化之间使用组合。聚合关系而不是继承关系，从而使两者相对独立地变化。这就是桥接模式的用意所在。
     *
     *
     *  设计原则
     *  1、尽量使用对象聚合弱关联，避免使用继承强关联
     *      软件设计模式的初衷就是为了解决软件复用、内聚、耦合等问题。在类与类之间，应该尽量使用弱关联的关系，如果两个类的关联
     *  确实非常紧密，则使用继承的强关联关系，一般情况下，要尽量避免使用高耦合度的设计方式。这样不利于软件结构的扩展，软件结构的
     *  健壮性也会大大降低。
     *      桥接设计模式中类的抽象及实现都应该能以通过生成子类的方法加以扩充，我们不必担心软件的升级和扩展会给原有系统造成不稳定的因素。
     *  这就是基于良好的软件设计模式所带来的好处。
     *
     *  2、抽象化和实现化的解耦
     *      之前，我们所掌握的软件设计模式，很少有提及抽象和实现之间解耦的。而桥接设计模式正好弥补了这个空缺，它使得软件设计模式所
     * 涵盖的领域更加完善。抽象化和实现化的解耦，可以说在“根”上对软件系统进行解耦。在软件系统中，某些类型由于自身的逻辑，具有两个
     * 或多个维度的变化，如何应多这种“多维度的变化”？如何利用面向对象的技术使该类型能够轻松地沿着多个方向变化而又互不影响？桥接模式
     * 给出了最好的答案。
     *
     */
}
