package com.lancer.结构型模式.外观模式;

public class test {
    /**
     * 模式定义：
     *
     *      外观模式(Facade Pattern)是软件工程中常用的一种软件设计模式。它为子系统中的一组接口提供一个统一的高层接口，使子系统更容易使用。
     * 外观模式通过一个外观接口读/写子系统中各接口的数据资源，而客户可以通过外观接口读取内部资源库，不与子系统产生交互。
     *
     *
     * 设计原则
     * 1、迪米特法则--最少知识原则
     *      迪米特原则，又称为最少知识原则,它的意思是说一个软件实体应当尽可能少地与其他实体发生相互作用。如果两个类不直接通信，那么
     *  这两个类就不应当发生直接的相互作用，如果一个类需要调用另一个类的某个方法，可以通过第三个类转发这个调用，即只和你的密友谈话。
     *  2、封装变化部分
     *      最少知识原则的应用使得外观模式可以应对子系统的变化对客户应用程序的影响。只要外观没有变化，客户端的应用程序就不会受到任何影响。
     * 而针对子系统内部发生的各种变化，外观已经封装起来了，这对外部应用是完全透明的，外部应用根本感觉不到内部的变化。外观系统很好地隔离了
     * 复杂系统与外部应用之间的依赖，有效地降低了客户应用与一个复杂系统之间的耦合读。
     */
}
